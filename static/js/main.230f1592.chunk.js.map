{"version":3,"sources":["sprites.js","starship.js","App.js","serviceWorker.js","index.js"],"names":["Sprite","this","mass","x","y","vx","vy","ax","ay","rotation","angularVelocity","momentOfInertia","scale","present","world","tModelToWorld","Transform","shapeModel","ShapeX","shapeDraw","children","xWorld","yWorld","setTranslation","vxWorld","vyWorld","timeStep","width","step","setScale","setRotation","rdelta","other","graphics","pointIntersect","intersectsShape","s","init","setPos","setVelocity","addPoint","addLineTo","addElement","view","copyFrom","transform","tWorldToView","drawShape","draw","max","nPoints","xPoints","yPoints","nLines","nLine","x1","y1","x2","y2","nPoint","i","a","b","c","d","e","f","shape2","seg2","getLineSegment","j","seg1","getIntersection","iLine","nPoint2","segment","Segment","xOld","yOld","start","xNew","yNew","drawLine","xscale","yscale","r","Math","cos","sin","getLineParameters","denom","pointInBounds","Point2D","color","setForeground","drawBox","App","rdeltaamount","throttle","throttleamount","World","background","foreground","context","Graphics","canvas","height","setInterval","bind","event","key","bStop","ship","rotate","setThrottle","checkCollisions","radiansPerDegree","pi","g","viewMain","View","Ship","land","Land","moon","Moon","base","Base","widthPixels","heightPixels","widthWindow","centerOn","clear","setColor","checkCollision","drawCircle","console","log","explode","trackSprite","sprites","widthWorld","heightWorld","scaleFactor","viewWidthPixels","viewHeightPixels","viewWidthWorldUnits","sprite","drawRect","massShip","massFuel","rotationUnit","burnRate","exhaustVelocity","thrustUnit","shipSize","outOfFuel","flame","Flame","sqrt","fuelBurned","thrustAccel","floor","drawString","random","hillHeight","nBase","t","xw","yw","radius","name","strokeStyle","clearRect","beginPath","arc","PI","stroke","x0","y0","moveTo","lineTo","rect","app","React","useEffect","document","querySelector","getContext","starship","run","onkeydown","onKeyDown","onkeyup","onKeyUp","focus","className","tabIndex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.230f1592.chunk.js","sourcesContent":["//-----------------------------------------------------------------------------\n// Sprite library\n//-----------------------------------------------------------------------------\n\n// A sprite is an object that exists within the world.\n// Defines a shape in model coordinates.\n// This gets transformed into world coordinates, then view coordinates, \n// before being drawn. \nexport class Sprite {\n\n  constructor() {\n    \n    this.mass = null // [kg]\n    this.x = 0 // [m] position in world coordinates\n    this.y = 0\n    this.vx = 0 // [m/s] velocity in world units\n    this.vy = 0\n    this.ax = 0 // [m/s/s] acceleration in world units\n    this.ay = 0\n    this.rotation = 0.0 // [radians] current amount of rotation\n    this.angularVelocity = 0.0 // [radians/sec]\n    this.momentOfInertia = 0 // [kg] about center of mass\n    this.scale = 1.0 // [unitless] zoom factor\n    this.present = true // is this sprite actually here? \n    \n    this.world = null // the world this sprite belongs to\n    this.tModelToWorld = new Transform() // transformation from model coordinates to world coordinates\n    this.shapeModel = new ShapeX() // model shape in model coordinates\n    this.shapeDraw = new ShapeX() // model that will be transformed to view coordinates\n    this.children = [] // vector of child sprites\n  }\n\n  // Initialize the sprite\n  init(world) {\n    this.world = world\n  }\n  \n  // Set the position of the sprite, in world coordinates\n  setPos(xWorld, yWorld) {\n    this.x = xWorld\n    this.y = yWorld\n    // Update the transformation matrix\n    this.tModelToWorld.setTranslation(xWorld, yWorld)\n  }\n\n  // Set the velocity for the sprite, in world units\n  setVelocity(vxWorld, vyWorld) {\n    this.vx = vxWorld\n    this.vy = vyWorld\n  }\n\n  // Advance the sprite by one timestep\n  step(timeStep) {\n    \n    // Add acceleration due to gravity\n    //. move this elsewhere\n    // this.ay += this.world.g\n    \n    // Integrate\n    //. too primitive - fix this\n    this.vx += this.ax * timeStep\n    this.vy += this.ay * timeStep\n    this.x += this.vx * timeStep\n    this.y += this.vy * timeStep\n\n    // Rotate\n    this.rotation += this.angularVelocity * timeStep\n    \n    // Keep sprite in the world\n    if (this.x > this.world.width)\n      this.x -= this.world.width\n    if (this.x < 0.0)\n      this.x += this.world.width\n    \n    // Update the transformation matrix\n    this.tModelToWorld.setTranslation(this.x, this.y)\n\n    // Update any child sprites also\n    for (const sprite of this.children) {\n      sprite.step(timeStep)\n    }\n  }\n  \n  // Set the zoom scale and update the drawing polygon.\n  // Better to do this once here than with each draw call!\n  setScale(scale) {\n    // Save the new scale\n    this.scale = scale\n    this.tModelToWorld.setScale(scale, scale)\n  }\n\n  // Set the rotation amount for the ship in radians and update the \n  // drawing polygon.\n  setRotation(rotation) {\n    this.rotation = rotation\n    this.tModelToWorld.setRotation(rotation)\n  }\n  \n  // Rotate the ship by the specified amount (in radians) and update \n  // the drawing polygon.\n  rotate(rdelta) {\n    this.rotation += rdelta\n    this.tModelToWorld.setRotation(this.rotation)\n  }\n  \n  // Check for a collision between this sprite and the specified sprite. \n  // Returns a Point2D with intersection or null.\n  checkCollision(other, graphics) {\n    // console.log('checkCollision', this, other)\n    const pointIntersect = this.shapeDraw.intersectsShape(other.shapeDraw, graphics)\n    // console.log(pointIntersect)\n    if (pointIntersect) return pointIntersect\n    for (const child of this.children) {\n      const pointIntersect = child.shapeDraw.intersectsShape(other.shapeDraw, graphics)\n      if (pointIntersect) return pointIntersect\n    }    \n    return null\n  }\n\n  // Make the sprite explode!\n  explode() {\n    //. default behavior will scatter the linesegments that make up \n    // the sprite, add flames, etc.\n    \n    const s = new Sprite()\n    s.init(this.world)\n    s.setPos(this.x, this.y)\n    s.setVelocity(this.vx, this.vy - 15.0)\n    s.shapeModel.addPoint(0, -25) // 0\n    s.shapeModel.addPoint(10, 10) // 1\n    s.shapeModel.addPoint(0,0) // 2\n    s.shapeModel.addLineTo(0)\n    s.shapeModel.addLineTo(1)\n    s.shapeModel.addLineTo(2)\n    s.shapeModel.addLineTo(0)\n    this.children.addElement(s)\n\n    // clear the old line segments\n    //shapeModel = new ShapeX()\n    this.present = false\n  }\n  \n  // Draw the sprite on the screen using the given view transformation\n  draw(graphics, view)  {\n    \n    // We have the model coordinates, need to convert to world coordinates \n    // using the sprite transformation, then convert to view coordinates \n    // using the view transformation.\n    // Can combine these into one transform for speed.\n    this.shapeDraw.copyFrom(this.shapeModel)\n    this.shapeDraw.transform(this.tModelToWorld)\n    this.shapeDraw.transform(view.tWorldToView)\n    this.shapeDraw.drawShape(graphics)\n    \n    // Now draw any child sprites\n    for (const child of this.children) {\n      child.draw(graphics, view)\n    }    \n  }  \n}\n\n\n\n//-----------------------------------------------------------------------------\n// ShapeX\n//-----------------------------------------------------------------------------\n\n// why the X ? was a java name conflict\n\n// Defines a shape, which is a series of line segments between points.\n// First define the points needed, with calls to addPoint(x,y).\n// Then define the line segments between the points, with calls to \n// addLineTo(point). \n// To start a new line segment, call addLineTo(-1). \n//, might be able to implement Shape interface eventually?\n//, store bounding rectangle as two points - translate them along with other points\nexport class ShapeX {\n\n  constructor() {\n    \n    //, max number of points, for now. \n    this.max = 50\n\n    // Array of points\n    this.nPoints = 0\n    this.xPoints = []\n    this.yPoints = []\n    \n    // Array of line segments\n    // index is the point number, -1 means start a new line segment\n    this.nLines = 0\n    this.nLine = []\n\n    // Bounding rectangle\n    this.x1 = 0\n    this.y1 = 0\n    this.x2 = 0\n    this.y2 = 0\n  }\n\n  // Add a point to the shape\n  addPoint(x, y) {\n    // console.log('addpoint', x, y)\n    this.xPoints[this.nPoints] = x\n    this.yPoints[this.nPoints] = y\n    this.nPoints++\n    // Update bounding rectangle\n    if (x < this.x1) this.x1 = x\n    if (x > this.x2) this.x2 = x\n    if (y < this.y1) this.y1 = y\n    if (y > this.y2) this.y2 = y\n  }\n  \n  // Add a line segment to the given point.\n  // Pass -1 to start a new line segment. \n  addLineTo(nPoint) {\n    this.nLine[this.nLines] = nPoint\n    this.nLines++\n  }\n  \n  // Copy another shape into this one\n  copyFrom(other) {\n    // console.log('copyfrom', other, 'to', this)\n    // for (let i = 0; i < other.nPoints; i++) {\n    //   this.addPoint(other.xPoints[i], other.yPoints[i])\n    // }\n    // for (let i = 0; i < other.nLines; i++) {\n    //   this.addLineTo(other.nLine[i])\n    // }\n    this.nPoints = other.nPoints\n    this.nLines = other.nLines\n    this.xPoints = [...other.xPoints]\n    this.yPoints = [...other.yPoints]\n    this.nLine = [...other.nLine]\n    this.x1 = other.x1\n    this.x2 = other.x2\n    this.y1 = other.y1\n    this.y2 = other.y2\n  }\n  \n  // Transform this shape by the given 2d transform.\n  // Includes scale, rotate, and translate.\n  // Just need to transform the points and the bounding box.\n  transform(transform) {\n    for (let i = 0; i < this.nPoints; i++) {\n      const x = this.xPoints[i]\n      const y = this.yPoints[i]\n      this.xPoints[i] = (transform.a * x + transform.b * y + transform.c)\n      this.yPoints[i] = (transform.d * x + transform.e * y + transform.f)\n    }\n    // Transform the bounding rectangle also!\n    let x = this.x1\n    let y = this.y1\n    this.x1 = (transform.a * x + transform.b * y + transform.c)\n    this.y1 = (transform.d * x + transform.e * y + transform.f)\n    x = this.x2\n    y = this.y2\n    this.x2 = (transform.a * x + transform.b * y + transform.c)\n    this.y2 = (transform.d * x + transform.e * y + transform.f)\n  }    \n  \n  // See if this shape intersects anywhere with the given shape -\n  // returns Point2D with intersection or null.\n  intersectsShape(shape2, graphics) {\n    // Walk through shape2's line segments and see if they intersect with \n    // our line segments.\n    // This is O(n^2) so won't scale.\n    //. first should check if the point is within the bounding box of this sprite - \n    // (x - bounds, y - bounds) to (x + bounds, y + bounds).\n    for (let i = 0; i < shape2.nLines - 1; i++) {\n      // Get line segment\n      const seg2 = shape2.getLineSegment(i)\n      if (seg2) {\n        // seg2.drawSegment(graphics, 'orange')\n        // seg2.drawBoundingBox(graphics, 'orange')\n        for (let j = 0; j < this.nLines - 1; j++) {\n          const seg1 = this.getLineSegment(j)\n          if (seg1) {\n            // seg1.drawSegment(graphics, 'red')\n            // seg1.drawBoundingBox(graphics, 'red')\n            const pointIntersect = seg1.getIntersection(seg2)\n            if (pointIntersect) {\n              return pointIntersect\n            }\n          }\n        } \n      }\n    }\n    return null\n  }\n\n  // Get the specified Segment object with the endpoints of the \n  // specified line segment, as stored in this shape's arrays.\n  // If the specified line segment is not a segment (ie it's a \n  // terminator), then return null.\n  getLineSegment(iLine) {\n    const nPoint = this.nLine[iLine]\n    const nPoint2 = this.nLine[iLine+1]\n    // First make sure we have a segment\n    if ((nPoint !== -1) && (nPoint2 !== -1)) {\n      const segment = new Segment()\n      segment.x1 = this.xPoints[nPoint]\n      segment.y1 = this.yPoints[nPoint]\n      segment.x2 = this.xPoints[nPoint2]\n      segment.y2 = this.yPoints[nPoint2]\n      return segment\n    }\n    return null\n  }\n  \n  // Draw this shape on the given graphics output\n  //. optimize this to use moveTo, lineTo methods\n  drawShape(graphics) {\n    let xOld = 0\n    let yOld = 0\n    let start = true\n    for (let i = 0; i < this.nLines; i++) {\n      const nPoint = this.nLine[i]\n      // Check for start of a new line segment\n      if (nPoint === -1)\n        start = true\n      else {\n        // Draw a line to the next point\n        const xNew = this.xPoints[nPoint]\n        const yNew = this.yPoints[nPoint]\n        if (start === false)\n          graphics.drawLine(xOld, yOld, xNew, yNew)\n        // good for debugging\n        // graphics.drawString(\"L\" + i, xOld, yOld)\n        xOld = xNew\n        yOld = yNew\n        start = false\n      }\n    }\n  }\n}\n\n\n\n//-----------------------------------------------------------------------------\n// Transform\n//-----------------------------------------------------------------------------\n\n// Class for a 2d Affine transform, which can translate, rotate, and scale points.\n// Represented by a 2x3 matrix:\n//   | a d |\n//   | b e |\n//   | c f |\n// Defaults to the identity transform (a and d = 1, all others 0)\nexport class Transform {\n  \n  constructor(a, b, c, d, e, f) {\n    this.a = 1.0 // default\n    this.b = 0\n    this.c = 0\n    this.d = 0\n    this.e = 1.0 // default\n    this.f = 0\n  }\n\n  // Set the translation (x and y shift) for this transform\n  setTranslation(x, y) {\n    this.c = x\n    this.f = y\n  }\n  \n  // Set the scale for this transform\n  setScale(xscale, yscale) {\n    this.a = xscale\n    this.e = yscale\n  }\n  \n  // Set the rotation for this transform\n  setRotation(r) {\n    // console.log('setrotation', r)\n    this.a = Math.cos(r)\n    this.b = -Math.sin(r)\n    this.d = Math.sin(r)\n    this.e = Math.cos(r)\n    // console.log(this)\n  }\n\n  // Multiply this transform by another.\n  // Allows for compositing transforms together. \n  // multiply(Transform t) {\n  multiply(transform) {\n    //. raise exception - not yet implemented\n  }  \n}\n\n\n//-----------------------------------------------------------------------------\n// Segment\n//-----------------------------------------------------------------------------\n\n// Represents a line segment (x1, y1) to (x2, y2).\n// The line segment lies along the line (ax + by = c), the terms of which \n// can be obtained by a call to getLineParameters().\nexport class Segment {\n\n  constructor(x1, y1, x2, y2) {\n    this.x1 = x1\n    this.y1 = y1\n    this.x2 = x2\n    this.y2 = y2\n    this.a = null\n    this.b = null\n    this.c = null\n  }\n  \n  // See if this line segment intersects the given line segment.\n  // Returns a Point2D object of the intersect point if segments intersect, \n  // or null if they don't.\n  getIntersection(other) {\n    // Get equations describing lines (ax + bx = c),\n    // then solve for a point - if no solution, no intersection.\n    this.getLineParameters()\n    other.getLineParameters()\n    const denom = this.b * other.a - other.b * this.a\n    // If denominator is zero, no solution, so no intersection (ie lines are parallel)\n    // You can see that the slopes are the same because if a/b == a'/b' then denom=0\n    if (denom === 0)\n      return null\n    // Lines intersect, but need to check if intersecting point is actually within \n    // both line segments bounding boxes.\n    const x = (this.b * other.c - other.b * this.c) / denom\n    const y = (this.c * other.a - other.c * this.a) / denom\n    // console.log(x, this.x1, this.x2)\n    if (!this.pointInBounds(x, y)) return null\n    if (!other.pointInBounds(x, y)) return null\n    // Must be on both line segments so return intersection\n    const intersectPoint = new Point2D(x, y)\n    return intersectPoint\n  }\n\n  // Check if the given point is within the bounds of the box \n  // described by this linesegment.\n  pointInBounds(x, y) {\n    if (this.x1 < this.x2) {\n      if ((x < this.x1) || (x > this.x2)) return false\n    }\n    else {\n      if ((x < this.x2) || (x > this.x1)) return false\n    }\n    if (this.y1 < this.y2) {\n      if ((y < this.y1) || (y > this.y2)) return false\n    }\n    else {\n      if ((y < this.y2) || (y > this.y1)) return false\n    }\n    return true\n  }\n  \n  // Get parameters for the line on which this line segment lies (ax + by = c).\n  // bug: didn't convert integers to floats before doing math!!\n  // bug: nasty - reversed equations for slope - resulted in sporadic errors. hard to find.\n  getLineParameters() {\n    if (this.x1 !== this.x2) {\n      this.a = ((this.y2 - this.y1)) / ((this.x1 - this.x2))\n      this.b = 1.0\n      this.c = this.a * this.x1 + this.b * this.y1\n    }\n    else {\n      this.a = 1.0\n      this.b = ((this.x1 - this.x2)) / ((this.y2 - this.y1))\n      this.c = this.a * this.x1 + this.b * this.y1\n    }\n  }\n\n  // Draw this linesegment with the given optional color\n  drawSegment(graphics, color) {\n    if (color) graphics.setForeground(color)\n    graphics.drawLine(this.x1, this.y1, this.x2, this.y2)\n  }\n\n  drawBoundingBox(graphics, color) {\n    if (color) graphics.setForeground(color)\n    graphics.drawBox(this.x1, this.y1, this.x2, this.y2)\n  }\n}\n\n\n//-----------------------------------------------------------------------------\n// Point2d\n//-----------------------------------------------------------------------------\n\n// Represents a 2D point\nexport class Point2D {\n  constructor(x, y) {\n    this.x = x\n    this.y = y\n  }\n}\n","//-----------------------------------------------------------------------------\r\n// Starship\r\n// A Starship launch and landing simulator\r\n// Note: all units are kg, meters, m/s, m/s/s, radians, newtons, etc.  \r\n//\r\n// Author: Brian Burns\r\n// History:\r\n//   version 0.1  2001-05  bounces on surface\r\n//   version 0.2  2012-05  added base\r\n//   version 0.3  2020-10  convert from java to javascript\r\n//-----------------------------------------------------------------------------\r\n\r\nimport * as sprites from './sprites'\r\n\r\n\r\nclass App {\r\n  \r\n  constructor() {\r\n    this.timeStep = 0.1 // integration and step timestep [seconds]\r\n    this.rdelta = 0.0\r\n    this.rdeltaamount = 0.2\r\n    this.throttle = 0\r\n    this.throttleamount = 10  \r\n    this.world = new World()\r\n    this.background = '#333'\r\n    this.foreground = '#eee'\r\n  }\r\n  \r\n  // Initialize the applet\r\n  run(context) {\r\n\r\n    this.context = context\r\n    this.graphics = new Graphics(context)\r\n    \r\n    // Initialize world and all the sprites it contains\r\n    this.world.init(context.canvas.width, context.canvas.height)\r\n\r\n    // this.graphics.setBackground(Color.white)\r\n    // this.graphics.setForeground(Color.black)\r\n\r\n    setInterval(this.step.bind(this), this.timeStep*1000)\r\n  }\r\n  \r\n  onKeyDown(event) {\r\n    switch (event.key) {\r\n      case 'a':\r\n        this.world.bStop = true\r\n        break\r\n      case 'ArrowLeft':\r\n        this.rdelta = -this.rdeltaamount\r\n        break\r\n      case 'ArrowRight':\r\n        this.rdelta = this.rdeltaamount\r\n        break\r\n      case 'ArrowUp':\r\n        this.throttle = this.throttleamount\r\n        break\r\n      case 'ArrowDown':\r\n        this.throttle = -this.throttleamount\r\n        break  \r\n      }\r\n  }\r\n  \r\n  onKeyUp(event) {\r\n    switch (event.key) {\r\n      case 'ArrowLeft':\r\n      case 'ArrowRight':\r\n        this.rdelta = 0.0\r\n        break\r\n      case 'ArrowUp':\r\n      case 'ArrowDown':\r\n        this.throttle = 0\r\n        break\r\n    }    \r\n  }\r\n  \r\n  step() {\r\n    this.world.ship.rotate(this.rdelta)\r\n    this.world.ship.setThrottle(this.throttle)\r\n    this.world.step(this.timeStep)\r\n    this.world.draw(this.graphics)\r\n    this.world.checkCollisions(this.graphics)\r\n  }\r\n}\r\n\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n// World\r\n//-----------------------------------------------------------------------------\r\n\r\n// The world object contains all the sprites - the ship, land, stars, moon, \r\n// clouds, etc.\r\n// Each sprite can be fixed or movable.\r\n// Also contains a view which it uses in rendering itself and its sprites.\r\nclass World {\r\n\r\n  constructor() {\r\n    \r\n    // Attributes: \r\n    this.width = 0 // Width and height of world, in world units (meters)\r\n    this.height = 0\r\n    this.radiansPerDegree = 2.0 * Math.pi / 360.0 // conversion factor\r\n    this.g = 5.0 // gravity (m/s/s)\r\n\r\n    // views should probably belong to the applet, since that's the main window\r\n    // will want a view for the stats also, which could be its own class?\r\n    this.viewMain = new View()\r\n    // this.viewShip = new View()\r\n    \r\n    // Sprite objects in this world\r\n    this.ship = new Ship()\r\n    this.land = new Land()\r\n    this.moon = new Moon()\r\n    this.base = new Base()\r\n    // this.stars = new Stars()\r\n    // this.clouds = new Clouds()\r\n  }\r\n\r\n  // Initialize the world\r\n  init(widthPixels, heightPixels) {\r\n    \r\n    const widthWindow = 500.0 // the view window looks on this many meters of the world horizontally\r\n    this.width = widthWindow * 2 // let's make the world two view width's wide\r\n    this.height = widthWindow / 2.0\r\n    \r\n    // Initialize view\r\n    this.viewMain.init(this, widthPixels, heightPixels, widthWindow)\r\n\r\n    // Set the zoom scale\r\n    this.viewMain.setScale(1.0)\r\n    \r\n    // Initialize all the sprites\r\n    this.ship.init(this)\r\n    this.land.init(this)\r\n    this.moon.init(this)\r\n    this.base.init(this)\r\n    // this.stars.init(this)\r\n    // this.clouds.init(this)\r\n    \r\n    // Put ship in middle of world\r\n    this.ship.setPos(this.width / 2.0, this.height / 2.0)\r\n    // this.ship.setPos(this.width / 2.0, this.height * 5/6)\r\n\r\n    //, Tell view to track the ship sprite\r\n    // this.view.trackSprite(this.ship)\r\n  }\r\n  \r\n  // Advance the world and all objects in it by one timestep. \r\n  step(timeStep) {\r\n    // Move ship and any other moving sprites\r\n    this.ship.step(timeStep)\r\n      \r\n    // Center the view on the ship\r\n    this.viewMain.centerOn(this.ship)\r\n  }\r\n  \r\n  // Draw the world and all the sprites it contains\r\n  draw(graphics) {\r\n\r\n    // Clear canvas\r\n    graphics.clear()\r\n\r\n    // Draw sprites\r\n    graphics.setColor('#000')\r\n    this.moon.draw(graphics, this.viewMain)\r\n    this.land.draw(graphics, this.viewMain)\r\n    this.base.draw(graphics, this.viewMain)\r\n    this.ship.draw(graphics, this.viewMain)\r\n    // this.stars.draw(graphics, this.viewMain)\r\n    // this.clouds.draw(graphics, this.viewMain)\r\n\r\n    // Draw stats and border\r\n    // this.viewMain.drawBorder(graphics) // flickers\r\n    // this.ship.drawStats(graphics) // flickers\r\n  }\r\n\r\n\r\n  // Check for collisions\r\n  // no return value\r\n  checkCollisions(graphics) {\r\n\r\n    // Check for ship-base collision = bad or good depending on speed\r\n    let pointIntersect = this.ship.checkCollision(this.base, graphics)\r\n    if (pointIntersect) {\r\n      // Draw a spark at the point of intersection (a small green circle)\r\n      let r = 10\r\n      graphics.setColor('green')\r\n      // graphics.drawOval(pointIntersect.x - w, pointIntersect.y - w, w, w)\r\n      graphics.drawCircle(pointIntersect.x, pointIntersect.y, r)\r\n      \r\n      // Ship should explode if above a certain velocity\r\n      if ((this.ship.vy*this.ship.vy + this.ship.vx*this.ship.vx) > 25) {\r\n        r = 20\r\n        graphics.setColor('orange')\r\n        // graphics.drawOval(pointIntersect.x - w, pointIntersect.y - w, w, w)\r\n        graphics.drawCircle(pointIntersect.x, pointIntersect.y, r)\r\n        console.log(\"explode ship\")\r\n        this.ship.explode()\r\n      }\r\n      \r\n      //. always stop the ship?\r\n      this.ship.vx = 0 \r\n      this.ship.vy = 0 \r\n\r\n      return\r\n    }\r\n    \r\n    // Check for collisions between the ship and land.\r\n    pointIntersect = this.ship.checkCollision(this.land, graphics)\r\n    if (pointIntersect) {\r\n\r\n      // Draw a spark at the point of intersection (a small red circle)\r\n      let r = 5\r\n      graphics.setColor('red')\r\n      graphics.drawCircle(pointIntersect.x, pointIntersect.y, r)\r\n\r\n      // Impart momentum to the ship\r\n      //. a certain amount of energy will go into deforming soil and ship\r\n      // ship.angularVelocity += 0.2f\r\n      this.ship.vy = -15.0 // bounce up!\r\n      \r\n      //. Ship should explode if above a certain velocity\r\n      // this.ship.explode()\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n// View\r\n//-----------------------------------------------------------------------------\r\n\r\n// A view is a window on the world.\r\n// Has a certain position in the world, and converts to/from pixel units.\r\n// Can be set to track a certain sprite, to keep it in the center of the view. \r\nclass View {\r\n\r\n  constructor() {\r\n\r\n    // Attributes\r\n    this.world = null // reference to world that this view is looking at\r\n    this.trackSprite = null // reference to sprite that we want to track\r\n    this.tWorldToView = new sprites.Transform() // transform from world coordinates to view coordinates\r\n    \r\n    // Position and size of view, in world coordinates\r\n    this.xWorld = 0\r\n    this.yWorld = 0\r\n    this.widthWorld = 0\r\n    this.heightWorld = 0\r\n\r\n    // Size of view, in pixels\r\n    this.widthPixels = 0\r\n    this.heightPixels = 0\r\n    \r\n    // Scale\r\n    // private float aspectRatio = 1.2f\r\n    this.xscale = 0 // pixels per world unit\r\n    this.yscale = 0\r\n    this.scaleFactor = 0 // unitless zoom factor (eg 2.0 means zoom in by factor of 2, 0.5 is zoom out)\r\n\r\n  }\r\n\r\n  // Initialize the view\r\n  init(world, viewWidthPixels, viewHeightPixels, viewWidthWorldUnits) {\r\n\r\n    this.world = world\r\n    this.widthPixels = viewWidthPixels\r\n    this.heightPixels = viewHeightPixels\r\n    this.scaleFactor = 1.0 // initialize zoom factor (unitless)\r\n\r\n    // Get conversion factor between pixels and world units\r\n    this.xscale = this.widthPixels / viewWidthWorldUnits // pixels per world unit\r\n    this.yscale = this.xscale // for now\r\n    \r\n    // Save width and height of view in world units\r\n    this.widthWorld = viewWidthWorldUnits\r\n    this.heightWorld = this.heightPixels / this.yscale\r\n\r\n    // Initialize the view transform, which converts from world coordinates to view coordinates (pixels)\r\n    this.tWorldToView.setScale(this.xscale * this.scaleFactor, this.yscale * this.scaleFactor)\r\n    this.tWorldToView.setRotation(0.0)\r\n    // this.tWorldToView.setTranslation(- this.xscale * this.xWorld, - this.yscale * this.yWorld)\r\n    this.setPos(this.xWorld, this.yWorld) // sets translate vector\r\n  }\r\n  \r\n  // Track the specified sprite to keep it centered in the view if possible\r\n  trackSprite(sprite) {\r\n    this.trackSprite = sprite\r\n  }\r\n  \r\n  setScale(scale) {\r\n    this.scaleFactor = scale\r\n    // this.tWorldToView.setScale(scale, scale)\r\n    // this.tWorldToView.setTranslation(- this.xscale * this.xWorld, - this.yscale * this.yWorld)\r\n    this.tWorldToView.setScale(this.xscale * this.scaleFactor, this.yscale * this.scaleFactor)\r\n    this.setPos(this.xWorld, this.yWorld) // upates translate vector\r\n  }\r\n    \r\n  // Center view on the specified sprite\r\n  //. also include approx size of sprite\r\n  centerOn(sprite) {\r\n    \r\n    // Set position of view in world coords so sprite will be centered in the view\r\n    this.x = sprite.x - this.widthWorld / 2 / this.scaleFactor\r\n    this.y = sprite.y - this.heightWorld / 2 / this.scaleFactor\r\n    \r\n    // Keep view in world vertically\r\n    if ((this.y + this.heightWorld / this.scaleFactor) > this.world.height)\r\n    this.y = this.world.height - this.heightWorld / this.scaleFactor\r\n    if (this.y < 0)\r\n    this.y = 0\r\n    \r\n    // Wraparound view horizontally\r\n    // if (this.x > this.world.width)\r\n    //   this.x -= this.world.width\r\n    // if (this.x < 0)\r\n    //   this.x += this.world.width\r\n\r\n    // Set the position for the view and update the transform matrix\r\n    this.setPos(this.x, this.y)\r\n  }\r\n\r\n  // Set the position of the view within the world\r\n  setPos(xWorld, yWorld) {\r\n    this.xWorld = xWorld\r\n    this.yWorld = yWorld\r\n    // Update transform\r\n    // this.tWorldToView.setTranslation(- this.xscale * this.xWorld, - this.yscale * this.yWorld)\r\n    this.tWorldToView.setTranslation(- this.xscale * this.scaleFactor * this.xWorld, - this.yscale * this.scaleFactor * yWorld)\r\n  }\r\n    \r\n  // Draw a border around view\r\n  //... this flickers, badly\r\n  drawBorder(graphics) {\r\n    graphics.drawRect(0, 0, this.widthPixels - 1, this.heightPixels - 1)\r\n  }\r\n}\r\n\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n// Ship\r\n//-----------------------------------------------------------------------------\r\n\r\n// A sprite to represent the ship\r\n// Also contains a flame sprite, to represent the flame. \r\nclass Ship extends sprites.Sprite {\r\n\r\n  constructor() {\r\n    super()\r\n    // Attributes\r\n    this.massShip = 0 // [kg]\r\n    this.massFuel = 0 // [kg]\r\n    this.rotationUnit = 0 // [radians]\r\n    this.burnRate = 0 // [kg/s]\r\n    this.exhaustVelocity = 0 // [m/s] \r\n    this.thrustUnit = 0 // [N]\r\n    this.throttle = 0 // 0 to 10. thrust = throttle * thrustunit\r\n    this.shipSize = 30.0 // rough size of ship\r\n    this.outOfFuel = false // flag\r\n\r\n    this.flame = new Flame() // sprite representing flame\r\n  }\r\n\r\n  // Initialize the ship\r\n  init(world) {\r\n    \r\n    this.world = world\r\n  \r\n    // x = world.width / 5\r\n    \r\n    this.flame.init(world)\r\n    this.flame.ship = this\r\n  \r\n    this.massShip = 1000 // kg\r\n    this.massFuel = 5000 // kg\r\n    this.mass = this.massShip + this.massFuel\r\n    this.rotation = 0.0 // radians\r\n    this.rotationUnit = 1.0 * world.radiansPerDegree // degrees converted to radians\r\n    this.exhaustVelocity = 250.0 // m/s (approximately mach 1)\r\n    this.momentOfInertia = this.massShip * 2 * (25+15) * (1 - 1 / Math.sqrt(2)) // kg (about center of mass)\r\n\r\n    // Parallel axis theorem - For Mass Moments of Inertia \r\n    // M : is the mass of the body. \r\n    // d : is the perpendicuar distance between the centroidal axis and the parallel axis.  \r\n    // Ic is moment of inertia about center of mass\r\n    // Ip = Ic + M*d*d\r\n    \r\n    // Calculate a burnRate that will balance out gravity at \r\n    // throttle 5 and fuel tank half empty.\r\n    // this.burnRate = 1.0 // kg/s\r\n    this.burnRate = (world.g * this.massShip + (this.massFuel / 2.0)) / (5.0 * this.exhaustVelocity) // 2.8 kg/s for g=1m/s/s \r\n    this.burnRate *= 6.0 //?\r\n    this.thrustUnit = this.burnRate * this.exhaustVelocity // kgm/s/s = newtons  \r\n    \r\n    // Define ship's vertices, in world units (meters)\r\n    this.shapeModel.addPoint(  0, -25) // 0\r\n    this.shapeModel.addPoint(-10,  10) // 1\r\n    this.shapeModel.addPoint( -7,   1) // 2\r\n    this.shapeModel.addPoint(-21,  15) // 3\r\n    this.shapeModel.addPoint( 10,  10) // 4\r\n    this.shapeModel.addPoint( 21,  15) // 5\r\n    this.shapeModel.addPoint(  7,   1) // 6\r\n    \r\n    // Define ship's shape with line segments\r\n    this.shapeModel.addLineTo(0)\r\n    this.shapeModel.addLineTo(1)\r\n    this.shapeModel.addLineTo(2)\r\n    this.shapeModel.addLineTo(3)\r\n    this.shapeModel.addLineTo(1)\r\n    this.shapeModel.addLineTo(4)\r\n    this.shapeModel.addLineTo(5)\r\n    this.shapeModel.addLineTo(6)\r\n    this.shapeModel.addLineTo(4)\r\n    this.shapeModel.addLineTo(0)\r\n    \r\n    this.setScale(1.0)\r\n    this.setRotation(this.rotation)\r\n  }\r\n\r\n  // Set the throttle level\r\n  setThrottle(throttle) {\r\n    if (this.outOfFuel)\r\n      this.throttle = 0\r\n    else\r\n      this.throttle = throttle\r\n  }\r\n  \r\n  // Move the ship according to its velocity, gravity, thrust, etc,\r\n  // and update the drawing shape.\r\n  step(timeStep) {\r\n    \r\n    // Get amount of fuel burned\r\n    const mass = this.massShip + this.massFuel\r\n    const fuelBurned = this.throttle * this.burnRate * timeStep\r\n    const thrust = this.throttle * this.thrustUnit\r\n    const thrustAccel = thrust / mass\r\n    \r\n    // Move ship according to gravity, thrust, etc.\r\n    this.ax = thrustAccel * Math.sin(this.rotation)\r\n    this.ay = - thrustAccel * Math.cos(this.rotation) + this.world.g\r\n    // this.ay = - thrustAccel * Math.cos(this.rotation)\r\n\r\n    // Update fuel remaining\r\n    this.massFuel -= fuelBurned\r\n    if (this.massFuel < 0) {\r\n      this.massFuel = 0\r\n      this.outOfFuel = true  \r\n    }\r\n\r\n    // Call base class\r\n    super.step(timeStep)\r\n  }\r\n  \r\n  //. Make the ship explode!\r\n  explode() {    \r\n    // draw orange and yellow circles filled for fire.\r\n    // create a bunch of sub-sprites for pieces of ship,\r\n    // give them all rnd velocities (plus ships velocity).\r\n    // on draw just draw these instead of the ship.\r\n    // on step move these instead of ship.\r\n    // ie make a ShipRemains object with a bunch of subobjects with different velocities?\r\n    // have them all stop at some depth under the horizon.\r\n    \r\n    // call super with a parameter for velocities etc\r\n    // replace existing sprite with child sprites.\r\n    // ie remove all line segments from this sprite. right?    \r\n    // super.explode()    \r\n  }  \r\n\r\n  // Draw ship stats\r\n  //. this flickers too much - don't call it\r\n  drawStats(graphics) {\r\n    //! format\r\n    // what is all this - where's printf?\r\n    // NumberFormat numberFormatter\r\n    // numberFormatter = NumberFormat.getNumberInstance(currentLocale)\r\n    // numberFormatter.format(amount)\r\n    let s\r\n    // s = \"Position (m): (\" + x + \", \" + y + \")\"\r\n    // g.drawString(s, 4, 22)\r\n    s = \"Velocity (m/s): (\" + Math.floor(this.vx*10)/10 + \", \" + Math.floor(this.vy*10)/10 + \")\"\r\n    graphics.drawString(s, 4, 22)\r\n    // s = \"Acceleration (m/s/s): (\" + ax + \", \" + ay + \")\"\r\n    // graphics.drawString(s, 4, 44)\r\n    // s = \"Rotation: (\" + rotation + \")\"\r\n    // graphics.drawString(s, 4, 55)\r\n    // s = \"Throttle: (\" + throttle + \")\"\r\n    // graphics.drawString(s, 4, 66)\r\n    s = \"Fuel (kg): (\" + this.massFuel + \")\"\r\n    if (this.massFuel < 500)\r\n      graphics.setColor('red')\r\n    graphics.drawString(s, 4, 33)\r\n    // graphics.setColor('black')\r\n    // s = \"view pos: (\" + polyDraw.xpoints[0] + \", \" + polyDraw.ypoints[0] + \")\"\r\n    // graphics.drawString(s, 4, 80)\r\n  }\r\n  \r\n  // Draw ship according to the specified view transformations\r\n  draw(graphics, view) {\r\n    \r\n    // Call base class to draw model\r\n    super.draw(graphics, view)\r\n    \r\n    // Draw flame\r\n    // how do we handle this? step could turn this subsprite on and off, ie set a flag in it\r\n    // sprite.draw could check for subsprites and transform them the same as the\r\n    // parent sprite, if the lock flag was set, otherwise would use their own transform\r\n    // this would make it easier to have things detach, like rocket boosters, and let\r\n    // them fall away - they would get same vel as ship, but only gravity would work on them.\r\n    // also each sprite could have different colors, or each segment could?\r\n    // might need to override draw for flame to get it to flicker correctly but that's okay\r\n    if (this.throttle > 0)\r\n      this.flame.draw(graphics, view)  \r\n  }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n// Flame\r\n//-----------------------------------------------------------------------------\r\n\r\n// A sprite to represent the flickering flame from the ship\r\nclass Flame extends sprites.Sprite {\r\n  \r\n  constructor() {\r\n    super()\r\n    this.ship = null // the shipe this sprite belongs to\r\n  }\r\n  \r\n  // Initialize the flame\r\n  init(world) {\r\n    \r\n    this.world = world\r\n  \r\n    // Define flame's shape, in world units (meters)\r\n    this.shapeModel.addPoint(-5, 11) // 0\r\n    this.shapeModel.addPoint( 0, 60) // 1\r\n    this.shapeModel.addPoint( 5, 11) // 2\r\n\r\n    this.shapeModel.addLineTo(0)\r\n    this.shapeModel.addLineTo(1)\r\n    this.shapeModel.addLineTo(2)    \r\n  }\r\n\r\n  // Draw the flickering flame\r\n  //, Note: will eventually just use base class to draw this sprite -\r\n  // it has a parent which is where draw will get tModelToWorld from\r\n  draw(graphics, view) {\r\n    \r\n    // Set color for flames\r\n    if (Math.random() > 0.5)\r\n      graphics.setColor('yellow') //. do white or yelloworange. red is too red. redorange? \r\n    else\r\n      graphics.setColor('orange')\r\n\r\n    // Draw shape using base class\r\n    // super.draw(graphics, view)    \r\n    this.shapeDraw.copyFrom(this.shapeModel)\r\n    this.shapeDraw.transform(this.ship.tModelToWorld)\r\n    this.shapeDraw.transform(view.tWorldToView)\r\n    this.shapeDraw.drawShape(graphics)\r\n  }\r\n}\r\n\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n// Land\r\n//-----------------------------------------------------------------------------\r\n\r\n// A sprite to represent the hills.\r\n// Land will wrap around when reaches the edges. \r\nclass Land extends sprites.Sprite {\r\n\r\n  // Initialize the land sprite, by making up random hills.\r\n  init(world) {\r\n    \r\n    this.world = world    \r\n    this.width = world.width\r\n    this.height = world.height\r\n    const hillHeight = this.height / 5 //. 20% of world height\r\n    \r\n    // Create random horizon line\r\n    const nPoints = 40\r\n    for (let i = 0; i < nPoints; i++) {\r\n      const x = this.width * i / (nPoints - 1)\r\n      const y = this.height - (Math.random() * hillHeight)\r\n      this.shapeModel.addPoint(x, y)\r\n      this.shapeModel.addLineTo(i)\r\n    }\r\n\r\n    // Make space for a base\r\n    this.nBase = Math.floor(nPoints * Math.random())\r\n    this.shapeModel.yPoints[this.nBase] = \r\n      this.shapeModel.yPoints[this.nBase+1] = \r\n      this.shapeModel.yPoints[this.nBase+2]\r\n    \r\n    // Make the last point the same as the first point so it will wrap around properly\r\n    this.shapeModel.yPoints[nPoints-1] = this.shapeModel.yPoints[0]\r\n\r\n    // Set scale\r\n    this.setScale(1.0)\r\n  }\r\n\r\n  // Draw the land\r\n  draw(graphics, view) {\r\n    \r\n    this.shapeDraw.copyFrom(this.shapeModel)\r\n    this.shapeDraw.transform(this.tModelToWorld)\r\n    this.shapeDraw.transform(view.tWorldToView)\r\n    // graphics.setColor('black')\r\n    // graphics.setColor(this.color)\r\n    this.shapeDraw.drawShape(graphics)\r\n    \r\n    // Repeat land off to the right\r\n    if (view.xWorld > (this.world.width - view.widthWorld)) {\r\n      const shape2 = new sprites.ShapeX()\r\n      shape2.copyFrom(this.shapeModel)\r\n      shape2.transform(this.tModelToWorld)\r\n      const t = new sprites.Transform()\r\n      t.setTranslation(view.world.width, 0)\r\n      shape2.transform(t)\r\n      shape2.transform(view.tWorldToView)\r\n      shape2.drawShape(graphics)\r\n    }\r\n    // Repeat land off to the left\r\n    if (view.xWorld < view.widthWorld) {\r\n      const shape2 = new sprites.ShapeX()\r\n      shape2.copyFrom(this.shapeModel)\r\n      shape2.transform(this.tModelToWorld)\r\n      const t = new sprites.Transform()\r\n      t.setTranslation(-view.world.width, 0)\r\n      shape2.transform(t)\r\n      shape2.transform(view.tWorldToView)\r\n      shape2.drawShape(graphics)\r\n    }\r\n  }  \r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n// Base\r\n//-----------------------------------------------------------------------------\r\n\r\n// A sprite to represent the moonbase.\r\nclass Base extends sprites.Sprite {\r\n\r\n  init(world) {\r\n    \r\n    this.world = world\r\n    this.width = world.width\r\n    this.height = world.height\r\n    this.hillHeight = this.height / 5 //. 20% of world height\r\n\r\n    const nBase = world.land.nBase\r\n    this.x = world.land.shapeModel.xPoints[nBase]\r\n    this.xw = this.width / 20\r\n    \r\n    this.y = world.land.shapeModel.yPoints[nBase]\r\n    this.yw = this.height / 40\r\n    \r\n    this.shapeModel.addPoint(this.x, this.y)\r\n    this.shapeModel.addPoint(this.x+this.xw, this.y)\r\n    this.shapeModel.addPoint(this.x+this.xw, this.y-this.yw)\r\n    this.shapeModel.addPoint(this.x, this.y-this.yw)\r\n    this.shapeModel.addLineTo(0)\r\n    this.shapeModel.addLineTo(1)\r\n    this.shapeModel.addLineTo(2)\r\n    this.shapeModel.addLineTo(3)\r\n    this.shapeModel.addLineTo(0)\r\n    \r\n    // Set scale\r\n    this.setScale(1.0)\r\n  }\r\n\r\n  // Draw the base\r\n  draw(graphics, view) {\r\n    // graphics.setColor('black')\r\n    this.shapeDraw.copyFrom(this.shapeModel)\r\n    this.shapeDraw.transform(this.tModelToWorld)\r\n    this.shapeDraw.transform(view.tWorldToView)\r\n    this.shapeDraw.drawShape(graphics)\r\n  }  \r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n// Moon\r\n//-----------------------------------------------------------------------------\r\n\r\n// A simple circle that doesn't interact with other sprites\r\nclass Moon extends sprites.Sprite {\r\n\r\n  constructor() {\r\n    super()\r\n    // this.diam = 40 // [m]\r\n    this.radius = 20 // [m]\r\n  }\r\n  \r\n  init(world) {\r\n    this.world = world\r\n    // Define moon's shape, in model coords (world units)\r\n    this.shapeModel.addPoint(0, 0)\r\n    this.setPos(550.0, 50.0)\r\n  }\r\n  \r\n  draw(graphics, view) {\r\n    // use superclass to get shapeDraw\r\n    // super.draw(graphics, view)\r\n    graphics.setColor('#eee')\r\n    graphics.drawCircle(this.shapeDraw.xPoints[0], this.shapeDraw.yPoints[0], this.radius)\r\n  }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n// Stars\r\n//-----------------------------------------------------------------------------\r\n\r\n// class Stars extends sprites.Sprite {\r\n// }\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n// Clouds\r\n//-----------------------------------------------------------------------------\r\n\r\n// class Clouds extends sprites.Sprite {\r\n// }\r\n\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n// main\r\n//-----------------------------------------------------------------------------\r\n\r\n// mimic Java's graphics context\r\nclass Graphics {\r\n  constructor(context) {\r\n    this.context = context\r\n  }\r\n  setBackground(name) {\r\n    // const color = Color[name]\r\n  }\r\n  setForeground(color) {\r\n    // const color = Color[name]\r\n    this.context.strokeStyle = color\r\n  }\r\n  setColor(color) {\r\n    this.context.strokeStyle = color\r\n  }\r\n  clear() {\r\n    this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height)\r\n  }\r\n  drawCircle(x, y, radius) {\r\n    this.context.beginPath()\r\n    this.context.arc(x, y, radius, 0, 2 * Math.PI)\r\n    this.context.stroke()\r\n  }\r\n  drawLine(x0, y0, x1, y1) {\r\n    this.context.beginPath()\r\n    this.context.moveTo(x0, y0)\r\n    this.context.lineTo(x1, y1)\r\n    this.context.stroke()\r\n  }\r\n  drawBox(x0, y0, x1, y1) {\r\n    this.context.beginPath()\r\n    this.context.rect(x0, y0, x1-x0, y1-y0)\r\n    this.context.stroke()\r\n  }\r\n}\r\n\r\n// const Color = {\r\n//   white: '#fff',\r\n//   black: '#000',\r\n//   green: '#0f0',\r\n//   orange: '#f80',\r\n//   lightGray: '#eee',\r\n//   red: '#f00',\r\n//   yellow: 'yellow',\r\n// }\r\n\r\n\r\nconst app = new App()\r\nexport default app\r\n","import React from 'react';\nimport './App.css';\nimport starship from './starship'\n\n\nfunction App() {\n  React.useEffect(() => {\n    const canvas = document.querySelector(\"canvas\")\n    const context = canvas.getContext(\"2d\")\n    starship.run(context)\n    canvas.onkeydown = event => starship.onKeyDown(event)\n    canvas.onkeyup = event => starship.onKeyUp(event)\n    canvas.focus()\n  }, [])\n  return (\n    <div className=\"App\">\n      <canvas width=\"800\" height=\"400\" tabIndex=\"1\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}